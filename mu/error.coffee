# Public Domain (-) 2014 The Wikifactory Authors.
# See the Wikifactory UNLICENSE file for details.

define 'µ', (µ, root) ->

  {Error, Object} = root
  {captureStackTrace} = Error

  newError = (name, defaultMessage) ->
    Exception = (message) ->
      err = @
      if !(err instanceof Exception)
        return new Exception(message)
      err.name = name
      err.message = if typeof message is 'string' then message else defaultMessage
      if captureStackTrace
        captureStackTrace err, Exception
      return
    Exception:: = Object.create Error::,
      constructor:
        value: Exception
    return Exception

  µ.newError = newError

  defError = (name, defaultMessage) ->
    µ[name] = newError name, defaultMessage
    return

  defError 'Abort', 'operation was aborted'
  defError 'KeyError', 'key not found'
  defError 'Timeout', 'timeout error'
  defError 'ValueError', 'invalid value'

  tryError =
    e: {}

  tryFn = (fn) ->
    # We define a JavaScript block here to avoid the unneccessary error
    # assignment generated by CoffeeScript.
    #
    # See https://github.com/jashkenas/coffee-script/issues/3434 for more info.
    `try {
        return fn();
    } catch (_err) {
        tryError.e = _err;
        return tryError;
    }`
    return

  tryFn1 = (fn, arg) ->
    `try {
        return fn(arg);
    } catch (_err) {
        tryError.e = _err;
        return tryError;
    }`
    return

  tryFn2 = (fn, arg1, arg2) ->
    `try {
        return fn(arg1, arg2);
    } catch (_err) {
        tryError.e = _err;
        return tryError;
    }`
    return

  tryMeth = (obj, meth) ->
    `try {
        return meth.call(obj);
    } catch (_err) {
        tryError.e = _err;
        return tryError;
    }`
    return

  tryMeth1 = (obj, meth, arg) ->
    `try {
        return meth.call(obj, arg);
    } catch (_err) {
        tryError.e = _err;
        return tryError;
    }`
    return

  tryMeth2 = (obj, meth, arg1, arg2) ->
    `try {
        return meth.call(obj, arg1, arg2);
    } catch (_err) {
        tryError.e = _err;
        return tryError;
    }`
    return

  µ.try =
    error: tryError
    fn: tryFn
    fn1: tryFn1
    fn2: tryFn2
    meth: tryMeth
    meth1: tryMeth1
    meth2: tryMeth2

  return
